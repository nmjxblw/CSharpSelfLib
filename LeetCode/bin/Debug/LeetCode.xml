<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LeetCode</name>
    </assembly>
    <members>
        <member name="T:LeetCode.Checker">
            <summary>
            检测器
            </summary>
        </member>
        <member name="P:LeetCode.Checker.StartTime">
            <summary>
            起始时间
            </summary>
        </member>
        <member name="P:LeetCode.Checker.TimeSpend">
            <summary>
            运行时间
            </summary>
        </member>
        <member name="P:LeetCode.Checker.EndTime">
            <summary>
            结束时间
            </summary>
        </member>
        <member name="M:LeetCode.Checker.#ctor(System.DateTime)">
            <summary>
            构造检测器
            </summary>
        </member>
        <member name="M:LeetCode.Checker.TimeRecord">
            <summary>
            记录时间
            </summary>
        </member>
        <member name="P:LeetCode.Checker.MemberCache">
            <summary>
            成员缓存
            </summary>
        </member>
        <member name="M:LeetCode.Checker.DeepCompare``1(``0,``0)">
            <summary>
            深度比较
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:LeetCode.Checker.CompareMembers(System.Object,System.Object,System.Type)">
            <summary>
            比较成员
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:LeetCode.Checker.CompareValues(System.Object,System.Object)">
            <summary>
            比较值
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:LeetCode.LeetCodeApp">
            <summary>
            LeetCode的主程序
            </summary>
        </member>
        <member name="M:LeetCode.LeetCodeApp.Start">
            <summary>
            程序主方法
            </summary>
        </member>
        <member name="P:LeetCode.ConfigManager.Data">
            <summary>
            动态解析后的 json 文件
            </summary>
        </member>
        <member name="M:LeetCode.ConfigManager.Save">
            <summary>
            存储
            </summary>
        </member>
        <member name="T:LeetCode.DynamicClass">
            <summary>
            动态解析类
            </summary>
        </member>
        <member name="M:LeetCode.DynamicClass.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            动态属性访问
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:LeetCode.DynamicClass.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            动态属性设置
            </summary>
            <param name="binder"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:LeetCode.DynamicClass.Item(System.String)">
            <summary>
            索引器访问
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:LeetCode.DynamicClass.Properties">
            <summary>
            获取所有属性
            </summary>
        </member>
        <member name="M:LeetCode.DynamicClass.GetDynamicMemberNames">
            <summary>
            返回所有键名
            </summary>
            <returns></returns>
        </member>
        <member name="M:LeetCode.DynamicClass.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
            <summary>
            重写 TryDeleteMember：删除单个成员（支持动态语法）
            </summary>
            <param name="binder"></param>
            <returns></returns>
        </member>
        <member name="M:LeetCode.DynamicClass.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="M:LeetCode.DynamicClass.Remove(System.String[])">
            <summary>
            批量删除成员
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="T:LeetCode.DynamicClassConverter">
            <summary>
            专属Json解析类
            </summary>
        </member>
        <member name="M:LeetCode.DynamicClassConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            读取接口
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:LeetCode.DynamicClassConverter.ReadObject(System.Text.Json.Utf8JsonReader@,LeetCode.DynamicClass,System.Text.Json.JsonSerializerOptions)">
            <summary>
            写入接口
            </summary>
            <param name="reader"></param>
            <param name="data"></param>
            <param name="options"></param>
            <exception cref="T:System.Text.Json.JsonException"></exception>
        </member>
        <member name="M:LeetCode.DynamicClassConverter.ReadValue(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
            <summary>
            读取值
            </summary>
            <param name="reader"></param>
            <param name="options"></param>
            <returns></returns>
            <exception cref="T:System.Text.Json.JsonException"></exception>
        </member>
        <member name="M:LeetCode.DynamicClassConverter.Write(System.Text.Json.Utf8JsonWriter,LeetCode.DynamicClass,System.Text.Json.JsonSerializerOptions)">
            <summary>
            写入动态类
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="M:LeetCode.DynamicClassConverter.WriteValue(System.Text.Json.Utf8JsonWriter,System.Object,System.Text.Json.JsonSerializerOptions)">
            <summary>
            写入值
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:LeetCode.JsonHelper">
            <summary>
            Json帮助类
            </summary>
            <remarks>注意：仅允许序列化属性而不是字段</remarks>
            <example>
            这是一个示例类，展示如何使用 Json帮助类：
            <code>
            public class TestClass
            {
                public TestClass(string name = "Bob", int age = 15) 
                { 
                    this.Name = name; 
                    this.Age = age; 
                }
                
                public string Name { get; set; } = "Bob";
                public int Age { get; set; } = 15;
            }
            </code>
            </example>
        </member>
        <member name="F:LeetCode.JsonHelper.MainJsonFilePath">
            <summary>
            Json文件主路径
            </summary>
        </member>
        <member name="F:LeetCode.JsonHelper.JsonOptions">
            <summary>
            序列化设定
            </summary>
        </member>
        <member name="F:LeetCode.JsonHelper.LockObj">
            <summary>
            线程锁
            </summary>
        </member>
        <member name="M:LeetCode.JsonHelper.#cctor">
            <summary>
            静态实例化
            </summary>
        </member>
        <member name="P:LeetCode.JsonHelper.JsonFilter">
            <summary>
            Json文件过滤器
            </summary>
        </member>
        <member name="M:LeetCode.JsonHelper.Load``1(System.String)">
            <summary>
            加载Json文件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fileName">默认文件名包含绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:LeetCode.JsonHelper.Save``1(``0,System.String[])">
            <summary>
            存写Json文件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="fileNames"></param>
            <returns></returns>
        </member>
        <member name="T:LeetCode.Launcher">
            <summary>
            LeetCode启动器
            </summary>
        </member>
        <member name="P:LeetCode.Launcher.App">
            <summary>
            Application实例化
            </summary>
        </member>
        <member name="M:LeetCode.Launcher.Main">
            <summary>
            主方法，用于启动程序
            </summary>
        </member>
        <member name="T:ListNode">
            <summary>
             链表节点
            </summary>
        </member>
        <member name="F:ListNode.val">
            <summary>
            链表节点值
            </summary>
        </member>
        <member name="F:ListNode.next">
            <summary>
            下一节点
            </summary>
        </member>
        <member name="M:ListNode.#ctor(System.Int32,ListNode)">
            <summary>
            链表节点构造函数
            </summary>
            <param name="val"></param>
            <param name="next"></param>
        </member>
        <member name="T:INestedInteger">
            <summary>
            嵌套整型接口
            </summary>
        </member>
        <member name="M:INestedInteger.IsInteger">
            <summary>
            return true if this NestedInteger holds a single integer, rather than a nested list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:INestedInteger.GetInteger">
            <summary>
            return the single integer that this NestedInteger holds, if it holds a single integer
            Return null if this NestedInteger holds a nested list
            </summary>
            <returns></returns>
        </member>
        <member name="M:INestedInteger.GetList">
            <summary>
            return the nested list that this NestedInteger holds, if it holds a nested list, Return null if this NestedInteger holds a single integer
            </summary>
            <returns></returns>
        </member>
        <member name="T:NestedInteger">
            <summary>
            嵌套整型
            </summary>
        </member>
        <member name="M:NestedInteger.#ctor(System.Object)">
            <summary>
            嵌套整型构造函数
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:NestedInteger.GetInteger">
            <summary>
            返回整型
            </summary>
            <returns></returns>
        </member>
        <member name="M:NestedInteger.GetList">
            <summary>
            返回列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:NestedInteger.IsInteger">
            <summary>
            是否为整数
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Point">
            <summary>
            点结构
            </summary>
        </member>
        <member name="F:Point.row">
            <summary>
            行索引
            </summary>
        </member>
        <member name="F:Point.col">
            <summary>
            列索引
            </summary>
        </member>
        <member name="T:TreeNode">
            <summary>
            树节点
            </summary>
        </member>
        <member name="F:TreeNode.val">
            <summary>
            节点值
            </summary>
        </member>
        <member name="F:TreeNode.left">
            <summary>
            左子节点
            </summary>
        </member>
        <member name="F:TreeNode.right">
            <summary>
            右子节点
            </summary>
        </member>
        <member name="M:TreeNode.#ctor(System.Int32,TreeNode,TreeNode)">
            <summary>
            树节点构造函数
            </summary>
            <param name="val"></param>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="T:DeepSeekApi.Recorder">
            <summary>
            记录器
            </summary>
        </member>
        <member name="P:DeepSeekApi.Recorder.Enable">
            <summary>
            功能启用标识符
            </summary>
        </member>
        <member name="M:DeepSeekApi.Recorder.#cctor">
            <summary>
            私有构造，在构造时自动注册记录报错
            </summary>
        </member>
        <member name="M:DeepSeekApi.Recorder.Write(System.String,System.String,System.Boolean,ContextLevel)">
            <summary>
            写入
            </summary>
        </member>
        <member name="M:DeepSeekApi.Recorder.Record(System.String)">
            <summary>
            标准记录
            </summary>
        </member>
        <member name="M:DeepSeekApi.Recorder.RecordError(System.String)">
            <summary>
            报错记录
            </summary>
            <param name="err_msg"></param>
        </member>
        <member name="T:DeepSeekApi.PathHelper">
            <summary>
            路径辅助类
            </summary>
        </member>
        <member name="M:DeepSeekApi.PathHelper.GetRuntimeDirectory(System.String)">
            <summary>
            将路径转换成OS可识别的路径
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:ContextLevel">
            <summary>
            记录器内容的等级
            </summary>
        </member>
        <member name="F:ContextLevel.None">
            <summary>
            无设置
            </summary>
        </member>
        <member name="F:ContextLevel.Public">
            <summary>
            公开级别
            </summary>
        </member>
        <member name="F:ContextLevel.Private">
            <summary>
            非公开级别
            </summary>
        </member>
        <member name="F:ContextLevel.Alert">
            <summary>
            警告级别
            </summary>
        </member>
        <member name="F:ContextLevel.Error">
            <summary>
            报错级别
            </summary>
        </member>
        <member name="F:ContextLevel.Debug">
            <summary>
            调试级别
            </summary>
        </member>
        <member name="T:Solution">
            <summary>
            解决方法基类
            </summary>
            Definition for a binary tree node.
            public class TreeNode {
                public int val;
                public TreeNode left;
                public TreeNode right;
                public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
                    this.val = val;
                    this.left = left;
                    this.right = right;
                }
            }
            Definition for a binary tree node.
            public class TreeNode {
                public int val;
                public TreeNode left;
                public TreeNode right;
                public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
                    this.val = val;
                    this.left = left;
                    this.right = right;
                }
            }
            Definition for a binary tree node.
            public class TreeNode {
                public int val;
                public TreeNode left;
                public TreeNode right;
                public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
                    this.val = val;
                    this.left = left;
                    this.right = right;
                }
            }
            Definition for singly-linked list.
            public class ListNode {
                public int val;
                public ListNode next;
                public ListNode(int val=0, ListNode next=null) {
                    this.val = val;
                    this.next = next;
                }
            }
            Definition for singly-linked list.
            public class ListNode {
                public int val;
                public ListNode next;
                public ListNode(int val=0, ListNode next=null) {
                    this.val = val;
                    this.next = next;
                }
            }
            Definition for singly-linked list.
            public class ListNode {
                public int val;
                public ListNode next;
                public ListNode(int val=0, ListNode next=null) {
                    this.val = val;
                    this.next = next;
                }
            }
            Definition for a binary tree node.
            public class TreeNode {
                public int val;
                public TreeNode left;
                public TreeNode right;
                public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
                    this.val = val;
                    this.left = left;
                    this.right = right;
                }
            }
        </member>
        <member name="M:Solution.TwoSum(System.Int32[],System.Int32)">
            <summary>
            给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。
            </summary>
            <param name="nums"></param>
            <param name="target"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Solution.GridIllumination(System.Int32,System.Int32[][],System.Int32[][])">
            <summary>
            给定一个 n x n 的网格和一些灯的位置，返回每个查询的结果，表示该位置是否被照亮。
            </summary>
            <param name="n"></param>
            <param name="lamps"></param>
            <param name="queries"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Solution.IsSymmetric(TreeNode)">
            <summary>
            判断二叉树是否对称
            </summary>
            <param name="root"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Solution.RomanToInt(System.String)">
            <summary>
            给定一个罗马数字，将其转换成整数。
            </summary>
            <param name="s"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Solution.LongestCommonPrefix(System.String[])">
            <summary>
            查找字符串数组中的最长公共前缀
            </summary>
            <param name="strs"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.CalculateMinimumHP(System.Int32[][])">
            <summary>
            计算骑士拯救公主所需的最低初始健康点数
            </summary>
            <param name="dungeon"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.Rob(System.Int32[])">
            <summary>
            打家劫舍
            </summary>
            <param name="nums"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Solution.SolveNQueens(System.Int32)">
            <summary>
            N 皇后问题
            </summary>
            <param name="n"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Solution.GetEmptyBoard(System.Int32)">
            <summary>
            获取一个空的棋盘
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.ToStringList(System.Boolean[][])">
            <summary>
            将棋盘转化为字符串列表
            </summary>
            <param name="board"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.NewRow(System.Int32)">
            <summary>
            获取一个新的行
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.PrintSolveNQueens(System.Int32)">
            <summary>
            打印N皇后问题的解
            </summary>
            <param name="n">棋盘尺寸</param>
        </member>
        <member name="M:Solution.IsPalindrome(System.Int32)">
            <summary>
            判断一个整数是否是回文数
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:Codec">
            Definition for a binary tree node.
            public class TreeNode {
                public int val;
                public TreeNode left;
                public TreeNode right;
                public TreeNode(int x) { val = x; }
            }
        </member>
        <member name="T:NestedIterator">
            <summary>
            	扁平化嵌套列表迭代器
             </summary>
        </member>
        <member name="M:NestedIterator.#ctor(System.Collections.Generic.IList{INestedInteger})">
            <summary>
            扁平化嵌套列表迭代器
            </summary>
            <param name="nestedList"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:NestedIterator.HasNext">
            <summary>
            是否有下一个元素
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:NestedIterator.Next">
            <summary>
            返回下一个元素
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
    </members>
</doc>
