<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LeetCode</name>
    </assembly>
    <members>
        <member name="T:LeetCode.Checker">
            <summary>
            检测器
            </summary>
        </member>
        <member name="P:LeetCode.Checker.StartTime">
            <summary>
            起始时间
            </summary>
        </member>
        <member name="P:LeetCode.Checker.TimeSpend">
            <summary>
            运行时间
            </summary>
        </member>
        <member name="P:LeetCode.Checker.EndTime">
            <summary>
            结束时间
            </summary>
        </member>
        <member name="M:LeetCode.Checker.#ctor(System.DateTime)">
            <summary>
            构造检测器
            </summary>
        </member>
        <member name="M:LeetCode.Checker.TimeRecord">
            <summary>
            记录时间
            </summary>
        </member>
        <member name="P:LeetCode.Checker.MemberCache">
            <summary>
            成员缓存
            </summary>
        </member>
        <member name="M:LeetCode.Checker.DeepCompare``1(``0,``0)">
            <summary>
            深度比较
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:LeetCode.Checker.CompareMembers(System.Object,System.Object,System.Type)">
            <summary>
            比较成员
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:LeetCode.Checker.CompareValues(System.Object,System.Object)">
            <summary>
            比较值
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="P:LeetCode.ConfigManager.Data">
            <summary>
            动态解析后的 json 文件
            </summary>
        </member>
        <member name="M:LeetCode.ConfigManager.Save">
            <summary>
            存储
            </summary>
        </member>
        <member name="T:LeetCode.LeetCodeApp">
            <summary>
            LeetCode的主程序
            </summary>
        </member>
        <member name="M:LeetCode.LeetCodeApp.Start">
            <summary>
            程序主方法
            </summary>
        </member>
        <member name="T:LeetCode.DynamicClass">
            <summary>
            动态解析类
            </summary>
        </member>
        <member name="M:LeetCode.DynamicClass.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            动态属性访问
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:LeetCode.DynamicClass.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            动态属性设置
            </summary>
            <param name="binder"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:LeetCode.DynamicClass.Item(System.String)">
            <summary>
            索引器访问
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:LeetCode.DynamicClass.Properties">
            <summary>
            获取所有属性
            </summary>
        </member>
        <member name="M:LeetCode.DynamicClass.GetDynamicMemberNames">
            <summary>
            返回所有键名
            </summary>
            <returns></returns>
        </member>
        <member name="M:LeetCode.DynamicClass.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
            <summary>
            重写 TryDeleteMember：删除单个成员（支持动态语法）
            </summary>
            <param name="binder"></param>
            <returns></returns>
        </member>
        <member name="M:LeetCode.DynamicClass.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="M:LeetCode.DynamicClass.Remove(System.String[])">
            <summary>
            批量删除成员
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="T:LeetCode.DynamicClassConverter">
            <summary>
            专属Json解析类
            </summary>
        </member>
        <member name="M:LeetCode.DynamicClassConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            读取接口
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:LeetCode.DynamicClassConverter.ReadObject(System.Text.Json.Utf8JsonReader@,LeetCode.DynamicClass,System.Text.Json.JsonSerializerOptions)">
            <summary>
            写入接口
            </summary>
            <param name="reader"></param>
            <param name="data"></param>
            <param name="options"></param>
            <exception cref="T:System.Text.Json.JsonException"></exception>
        </member>
        <member name="M:LeetCode.DynamicClassConverter.ReadValue(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
            <summary>
            读取值
            </summary>
            <param name="reader"></param>
            <param name="options"></param>
            <returns></returns>
            <exception cref="T:System.Text.Json.JsonException"></exception>
        </member>
        <member name="M:LeetCode.DynamicClassConverter.Write(System.Text.Json.Utf8JsonWriter,LeetCode.DynamicClass,System.Text.Json.JsonSerializerOptions)">
            <summary>
            写入动态类
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="M:LeetCode.DynamicClassConverter.WriteValue(System.Text.Json.Utf8JsonWriter,System.Object,System.Text.Json.JsonSerializerOptions)">
            <summary>
            写入值
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:LeetCode.ListNode">
            <summary>
             链表节点
            </summary>
        </member>
        <member name="F:LeetCode.ListNode.val">
            <summary>
            链表节点值
            </summary>
        </member>
        <member name="F:LeetCode.ListNode.next">
            <summary>
            下一节点
            </summary>
        </member>
        <member name="M:LeetCode.ListNode.#ctor(System.Int32,LeetCode.ListNode)">
            <summary>
            链表节点构造函数
            </summary>
            <param name="val"></param>
            <param name="next"></param>
        </member>
        <member name="T:LeetCode.INestedInteger">
            <summary>
            嵌套整型接口
            </summary>
        </member>
        <member name="M:LeetCode.INestedInteger.IsInteger">
            <summary>
            return true if this NestedInteger holds a single integer, rather than a nested list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LeetCode.INestedInteger.GetInteger">
            <summary>
            return the single integer that this NestedInteger holds, if it holds a single integer
            Return null if this NestedInteger holds a nested list
            </summary>
            <returns></returns>
        </member>
        <member name="M:LeetCode.INestedInteger.GetList">
            <summary>
            return the nested list that this NestedInteger holds, if it holds a nested list, Return null if this NestedInteger holds a single integer
            </summary>
            <returns></returns>
        </member>
        <member name="T:LeetCode.NestedInteger">
            <summary>
            嵌套整型
            </summary>
        </member>
        <member name="M:LeetCode.NestedInteger.#ctor(System.Object)">
            <summary>
            嵌套整型构造函数
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:LeetCode.NestedInteger.GetInteger">
            <summary>
            返回整型
            </summary>
            <returns></returns>
        </member>
        <member name="M:LeetCode.NestedInteger.GetList">
            <summary>
            返回列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:LeetCode.NestedInteger.IsInteger">
            <summary>
            是否为整数
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:LeetCode.Node">
            <summary>
            图节点
            </summary>
        </member>
        <member name="F:LeetCode.Node.val">
            <summary>
            节点值
            </summary>
        </member>
        <member name="F:LeetCode.Node.neighbors">
            <summary>
            邻接节点
            </summary>
        </member>
        <member name="M:LeetCode.Node.#ctor">
            <summary>
            图节点构造函数
            </summary>
        </member>
        <member name="M:LeetCode.Node.#ctor(System.Int32)">
            <summary>
            图节点构造函数
            </summary>
            <param name="_val"></param>
        </member>
        <member name="M:LeetCode.Node.#ctor(System.Int32,System.Collections.Generic.List{LeetCode.Node})">
            <summary>
            图节点构造函数
            </summary>
            <param name="_val"></param>
            <param name="_neighbors"></param>
        </member>
        <member name="T:LeetCode.Point">
            <summary>
            点结构
            </summary>
        </member>
        <member name="F:LeetCode.Point.row">
            <summary>
            行索引
            </summary>
        </member>
        <member name="F:LeetCode.Point.col">
            <summary>
            列索引
            </summary>
        </member>
        <member name="T:LeetCode.TreeNode">
            <summary>
            树节点
            </summary>
        </member>
        <member name="F:LeetCode.TreeNode.val">
            <summary>
            节点值
            </summary>
        </member>
        <member name="F:LeetCode.TreeNode.left">
            <summary>
            左子节点
            </summary>
        </member>
        <member name="F:LeetCode.TreeNode.right">
            <summary>
            右子节点
            </summary>
        </member>
        <member name="M:LeetCode.TreeNode.#ctor(System.Int32,LeetCode.TreeNode,LeetCode.TreeNode)">
            <summary>
            树节点构造函数
            </summary>
            <param name="val"></param>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="T:LeetCode.JsonHelper">
            <summary>
            Json帮助类
            </summary>
            <remarks>注意：仅允许序列化属性而不是字段</remarks>
            <example>
            这是一个示例类，展示如何使用 Json帮助类：
            <code>
            public class TestClass
            {
                public TestClass(string name = "Bob", int age = 15) 
                { 
                    this.Name = name; 
                    this.Age = age; 
                }
                
                public string Name { get; set; } = "Bob";
                public int Age { get; set; } = 15;
            }
            </code>
            </example>
        </member>
        <member name="F:LeetCode.JsonHelper.MainJsonFilePath">
            <summary>
            Json文件主路径
            </summary>
        </member>
        <member name="F:LeetCode.JsonHelper.JsonOptions">
            <summary>
            序列化设定
            </summary>
        </member>
        <member name="F:LeetCode.JsonHelper.LockObj">
            <summary>
            线程锁
            </summary>
        </member>
        <member name="M:LeetCode.JsonHelper.#cctor">
            <summary>
            静态实例化
            </summary>
        </member>
        <member name="P:LeetCode.JsonHelper.JsonFilter">
            <summary>
            Json文件过滤器
            </summary>
        </member>
        <member name="M:LeetCode.JsonHelper.Load``1(System.String)">
            <summary>
            加载Json文件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fileName">默认文件名包含绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:LeetCode.JsonHelper.Save``1(``0,System.String[])">
            <summary>
            存写Json文件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="fileNames"></param>
            <returns></returns>
        </member>
        <member name="T:LeetCode.Launcher">
            <summary>
            LeetCode启动器
            </summary>
        </member>
        <member name="P:LeetCode.Launcher.App">
            <summary>
            Application实例化
            </summary>
        </member>
        <member name="M:LeetCode.Launcher.Main">
            <summary>
            主方法，用于启动程序
            </summary>
        </member>
        <member name="T:LeetCode.Recorder">
            <summary>
            记录器
            </summary>
        </member>
        <member name="P:LeetCode.Recorder.Enable">
            <summary>
            功能启用标识符
            </summary>
        </member>
        <member name="M:LeetCode.Recorder.#cctor">
            <summary>
            私有构造，在构造时自动注册记录报错
            </summary>
        </member>
        <member name="M:LeetCode.Recorder.Write(System.String,System.String,System.Boolean,LeetCode.ContextLevel)">
            <summary>
            写入
            </summary>
        </member>
        <member name="M:LeetCode.Recorder.Record(System.String)">
            <summary>
            标准记录
            </summary>
        </member>
        <member name="M:LeetCode.Recorder.RecordError(System.String)">
            <summary>
            报错记录
            </summary>
            <param name="err_msg"></param>
        </member>
        <member name="T:LeetCode.PathHelper">
            <summary>
            路径辅助类
            </summary>
        </member>
        <member name="M:LeetCode.PathHelper.GetRuntimeDirectory(System.String)">
            <summary>
            将路径转换成OS可识别的路径
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:LeetCode.ContextLevel">
            <summary>
            记录器内容的等级
            </summary>
        </member>
        <member name="F:LeetCode.ContextLevel.None">
            <summary>
            无设置
            </summary>
        </member>
        <member name="F:LeetCode.ContextLevel.Public">
            <summary>
            公开级别
            </summary>
        </member>
        <member name="F:LeetCode.ContextLevel.Private">
            <summary>
            非公开级别
            </summary>
        </member>
        <member name="F:LeetCode.ContextLevel.Alert">
            <summary>
            警告级别
            </summary>
        </member>
        <member name="F:LeetCode.ContextLevel.Error">
            <summary>
            报错级别
            </summary>
        </member>
        <member name="F:LeetCode.ContextLevel.Debug">
            <summary>
            调试级别
            </summary>
        </member>
        <member name="T:LeetCode.Solution">
            <summary>
            解决方法基类
            </summary>
            Definition for a binary tree node.
            public class TreeNode {
                public int val;
                public TreeNode left;
                public TreeNode right;
                public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
                    this.val = val;
                    this.left = left;
                    this.right = right;
                }
            }
            Definition for a binary tree node.
            public class TreeNode {
                public int val;
                public TreeNode left;
                public TreeNode right;
                public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
                    this.val = val;
                    this.left = left;
                    this.right = right;
                }
            }
            Definition for a binary tree node.
            public class TreeNode {
                public int val;
                public TreeNode left;
                public TreeNode right;
                public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
                    this.val = val;
                    this.left = left;
                    this.right = right;
                }
            }
            Definition for a binary tree node.
            public class TreeNode {
                public int val;
                public TreeNode left;
                public TreeNode right;
                public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
                    this.val = val;
                    this.left = left;
                    this.right = right;
                }
            }
            Definition for singly-linked list.
            public class ListNode {
                public int val;
                public ListNode next;
                public ListNode(int val=0, ListNode next=null) {
                    this.val = val;
                    this.next = next;
                }
            }
            Definition for singly-linked list.
            public class ListNode {
                public int val;
                public ListNode next;
                public ListNode(int val=0, ListNode next=null) {
                    this.val = val;
                    this.next = next;
                }
            }
            Definition for singly-linked list.
            public class ListNode {
                public int val;
                public ListNode next;
                public ListNode(int val=0, ListNode next=null) {
                    this.val = val;
                    this.next = next;
                }
            }
            Definition for singly-linked list.
            public class ListNode {
                public int val;
                public ListNode next;
                public ListNode(int val=0, ListNode next=null) {
                    this.val = val;
                    this.next = next;
                }
            }
            Definition for a binary tree node.
            public class TreeNode {
                public int val;
                public TreeNode left;
                public TreeNode right;
                public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
                    this.val = val;
                    this.left = left;
                    this.right = right;
                }
            }
        </member>
        <member name="M:LeetCode.Solution.TwoSum(System.Int32[],System.Int32)">
            <summary>
            给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。
            </summary>
            <param name="nums"></param>
            <param name="target"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:LeetCode.Solution.GridIllumination(System.Int32,System.Int32[][],System.Int32[][])">
            <summary>
            给定一个 n x n 的网格和一些灯的位置，返回每个查询的结果，表示该位置是否被照亮。
            </summary>
            <param name="n"></param>
            <param name="lamps"></param>
            <param name="queries"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.IsSymmetric(LeetCode.TreeNode)">
            <summary>
            判断二叉树是否对称
            </summary>
            <param name="root"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.ZigzagLevelOrder(LeetCode.TreeNode)">
            <summary>
            二叉树的锯齿形层序遍历
            </summary>
            <param name="root"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.IsEscapePossible(System.Int32[][],System.Int32[],System.Int32[])">
            <summary>
            逃离大迷宫
            </summary>
            <param name="blocked">封锁的方格列表</param>
            <param name="source">源方格</param>
            <param name="target">目标方格</param>
            <returns></returns>
        </member>
        <member name="M:LeetCode.Solution.NumDistinct(System.String,System.String)">
            <summary>
            不同的子序列
            </summary>
            <param name="s"></param>
            <param name="t"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.GetRow(System.Int32)">
            <summary>
            杨辉三角 II
            </summary>
            <param name="rowIndex"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.MaxProfit(System.Int32[])">
            <summary>
            买卖股票的最佳时机 III
            </summary>
            <param name="prices"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.LadderLength(System.String,System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            单词接龙
            </summary>
            <param name="beginWord"></param>
            <param name="endWord"></param>
            <param name="wordList"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.RomanToInt(System.String)">
            <summary>
            给定一个罗马数字，将其转换成整数。
            </summary>
            <param name="s"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.MinCut(System.String)">
            <summary>
            分割回文串 II
            </summary>
            <param name="s"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.CloneGraph(LeetCode.Node)">
            <summary>
            给你无向 连通 图中一个节点的引用，请你返回该图的 深拷贝（克隆）。
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:LeetCode.Solution.Candy(System.Int32[])">
            <summary>
            分发糖果
            </summary>
            <param name="ratings"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.LongestCommonPrefix(System.String[])">
            <summary>
            查找字符串数组中的最长公共前缀
            </summary>
            <param name="strs"></param>
            <returns></returns>
        </member>
        <member name="M:LeetCode.Solution.WordBreak(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            单词拆分 II
            </summary>
            <param name="s"></param>
            <param name="wordDict"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.InsertionSortList(LeetCode.ListNode)">
            <summary>
            对链表进行插入排序。
            </summary>
            <param name="head">无序链表</param>
            <returns>排序后的链表</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.FindMin(System.Int32[])">
            <summary>
            寻找旋转排序数组中的最小值 II
            </summary>
            <param name="nums"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.CalculateMinimumHP(System.Int32[][])">
            <summary>
            计算骑士拯救公主所需的最低初始健康点数
            </summary>
            <param name="dungeon"></param>
            <returns></returns>
        </member>
        <member name="M:LeetCode.Solution.MaxProfit(System.Int32,System.Int32[])">
            <summary>
            Calculates the maximum profit that can be achieved from at most <paramref name="k"/> transactions on the
            given array of stock prices.
            </summary>
            <param name="k">The maximum number of transactions allowed. Must be a non-negative integer.</param>
            <param name="prices">An array of integers representing the stock prices on consecutive days. Cannot be null.</param>
            <returns>The maximum profit that can be achieved. Returns 0 if no transactions can be made or if the input array is
            empty.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.Rob(System.Int32[])">
            <summary>
            打家劫舍
            </summary>
            <param name="nums"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.IsValid(System.String)">
            <summary>
            给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:LeetCode.Solution.CanFinish(System.Int32,System.Int32[][])">
            <summary>
            课程表
            </summary>
            <param name="numCourses"></param>
            <param name="prerequisites"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.MergeTwoLists(LeetCode.ListNode,LeetCode.ListNode)">
            <summary>
            合并两个有序链表
            </summary>
            <param name="node1"></param>
            <param name="node2"></param>
            <returns></returns>
        </member>
        <member name="M:LeetCode.Solution.FindOrder(System.Int32,System.Int32[][])">
            <summary>
            课程表 II
            </summary>
            <param name="numCourses"></param>
            <param name="prerequisites"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.FindWords(System.Char[][],System.String[])">
            <summary>
            单词搜索 II
            </summary>
            <param name="board"></param>
            <param name="words"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.ShortestPalindrome(System.String)">
            <summary>
            最短回文串
            </summary>
            <param name="s"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.GetSkyline(System.Int32[][])">
            <summary>
            天际线问题
            </summary>
            <param name="buildings"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.ContainsNearbyAlmostDuplicate(System.Int32[],System.Int32,System.Int32)">
            <summary>
            存在重复元素 III
            </summary>
            <param name="nums"></param>
            <param name="indexDiff"></param>
            <param name="valueDiff"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.Calculate(System.String)">
            <summary>
            基本计算器
            </summary>
            <param name="s"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.MergeKLists(LeetCode.ListNode[])">
            <summary>
            合并 K 个升序链表
            </summary>
            <param name="lists"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.CountDigitOne(System.Int32)">
            <summary>
            数字 1 的个数
            </summary>
            <param name="n"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.MaxSlidingWindow(System.Int32[],System.Int32)">
            <summary>
            滑动窗口最大值
            </summary>
            <param name="nums"></param>
            <param name="k"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.ReverseKGroup(LeetCode.ListNode,System.Int32)">
            <summary>
            k 个一组翻转链表
            </summary>
            <param name="head"></param>
            <param name="k"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.RemoveDuplicates(System.Int32[])">
            <summary>
             删除有序数组中的重复项
            </summary>
            <param name="nums"></param>
            <returns></returns>
        </member>
        <member name="M:LeetCode.Solution.RemoveElement(System.Int32[],System.Int32)">
            <summary>
             移除元素
            </summary>
            <param name="nums"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:LeetCode.Solution.NumberToWords(System.Int32)">
            <summary>
            整数转换英文表示
            </summary>
            <param name="num"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.CanWinNim(System.Int32)">
            <summary>
            Nim 游戏
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:LeetCode.Solution.RemoveDuplicateLetters(System.String)">
            <summary>
            去除重复字母
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:LeetCode.Solution.MaxNumber(System.Int32[],System.Int32[],System.Int32)">
            <summary>
            Combines two arrays to create the largest possible number of a specified length.
            </summary>
            <remarks>The method selects elements from <paramref name="nums1"/> and <paramref
            name="nums2"/> in such a way that the resulting array is lexicographically the largest possible.</remarks>
            <param name="nums1">The first array of integers to be considered for the result.</param>
            <param name="nums2">The second array of integers to be considered for the result.</param>
            <param name="k">The length of the resulting array. Must be a non-negative integer less than or equal to the combined length
            of <paramref name="nums1"/> and <paramref name="nums2"/>.</param>
            <returns>An array of integers representing the largest possible number of length <paramref name="k"/> formed by
            combining elements from <paramref name="nums1"/> and <paramref name="nums2"/> while maintaining their
            relative order.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.Rob(LeetCode.TreeNode)">
            <summary>
            打家劫舍 III
            </summary>
            <param name="root"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.SolveSudoku(System.Char[][])">
            <summary>
             解数独
            </summary>
            <param name="board"></param>
        </member>
        <member name="M:LeetCode.Solution.PrintSudokuBoard(System.Char[][])">
            <summary>
            打印数独棋盘
            </summary>
            <param name="board"></param>
        </member>
        <member name="M:LeetCode.Solution.TrapRainWater(System.Int32[][])">
            <summary>
            接雨水 II
            </summary>
            <param name="heightMap"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.Trap(System.Int32[])">
            <summary>
            给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。
            </summary>
            <param name="height"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.StrongPasswordChecker(System.String)">
            <summary>
            强密码检验器
            </summary>
            <param name="password"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.LicenseKeyFormatting(System.String,System.Int32)">
            <summary>
            密钥格式化
            </summary>
            <param name="s"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:LeetCode.Solution.ReversePairs(System.Int32[])">
            <summary>
             翻转对
            </summary>
            <param name="nums"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.SolveNQueens(System.Int32)">
            <summary>
            N 皇后问题
            </summary>
            <param name="n"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.GetEmptyBoard(System.Int32)">
            <summary>
            获取一个空的棋盘
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:LeetCode.Solution.ToStringList(System.Boolean[][])">
            <summary>
            将棋盘转化为字符串列表
            </summary>
            <param name="board"></param>
            <returns></returns>
        </member>
        <member name="M:LeetCode.Solution.NewRow(System.Int32)">
            <summary>
            获取一个新的行
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:LeetCode.Solution.PrintSolveNQueens(System.Int32)">
            <summary>
            打印N皇后问题的解
            </summary>
            <param name="n">棋盘尺寸</param>
        </member>
        <member name="M:LeetCode.Solution.TotalNQueens(System.Int32)">
            <summary>
            给定一个整数 n ，返回 n 皇后问题 不同的解决方案的数量。
            </summary>
            <param name="n"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.UpdateBoard(System.Char[][],System.Int32[])">
            <summary>
            扫雷游戏
            </summary>
            <param name="board"></param>
            <param name="click"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:LeetCode.Solution.PrintMineSweeperBoard(System.Char[][])">
            <summary>
            打印扫雷结果
            </summary>
            <param name="board"></param>
        </member>
        <member name="M:LeetCode.Solution.CheckRecord(System.String)">
            <summary>
            学生出勤记录 I
            </summary>
            <param name="s"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:LeetCode.Solution.StrangePrinter(System.String)">
            <summary>
            奇怪的打印机
            </summary>
            <param name="s"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.FindRedundantConnection(System.Int32[][])">
            <summary>
            冗余连接
            </summary>
            <param name="edges"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.SortColors(System.Int32[])">
            <summary>
            颜色分类
            </summary>
            <param name="nums"></param>
        </member>
        <member name="M:LeetCode.Solution.HitBricks(System.Int32[][],System.Int32[][])">
            <summary>
            打砖块
            </summary>
            <param name="grid"></param>
            <param name="hits"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.Solution.IsPalindrome(System.Int32)">
            <summary>
            判断一个整数是否是回文数
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:LeetCode.Solution.FindPoisonedDuration(System.Int32[],System.Int32)">
            <summary>
            提莫在《英雄联盟》游戏中是一个非常可爱的角色，他的技能可以让敌人中毒。给你一个整数数组 timeSeries ，表示提莫在每个时间点施放技能的时刻，以及一个整数 duration ，表示提莫的技能在施放后持续多长时间（单位是秒）。返回敌人受到的总中毒时间。
            </summary>
            <param name="timeSeries"></param>
            <param name="duration"></param>
            <returns></returns>
        </member>
        <member name="T:LeetCode.Foo">
            <summary>
            解决方法代理类
            </summary>
        </member>
        <member name="M:LeetCode.Foo.#ctor">
            <summary>
            按序打印，构造函数
            </summary>
        </member>
        <member name="M:LeetCode.Foo.First(System.Action)">
            <summary>
            第一个方法
            </summary>
            <param name="printFirst"></param>
        </member>
        <member name="M:LeetCode.Foo.Second(System.Action)">
            <summary>
            第二个方法
            </summary>
            <param name="printSecond"></param>
        </member>
        <member name="M:LeetCode.Foo.Third(System.Action)">
            <summary>
            第三个方法
            </summary>
            <param name="printThird"></param>
        </member>
        <member name="T:LeetCode.StreamChecker">
            <summary>
            字符流
            </summary>
        </member>
        <member name="M:LeetCode.StreamChecker.#ctor(System.String[])">
            <summary>
            构造函数
            </summary>
            <param name="words"></param>
        </member>
        <member name="M:LeetCode.StreamChecker.Query(System.Char)">
            <summary>
            查询字符
            </summary>
            <param name="letter"></param>
            <returns></returns>
        </member>
        <member name="T:LeetCode.MinStack">
            <summary>
            Represents a stack data structure that supports retrieving the minimum element in constant time.
            </summary>
            <remarks>In addition to standard stack operations such as <see cref="M:LeetCode.MinStack.Push(System.Int32)"/> and <see
            cref="M:LeetCode.MinStack.Pop"/>,  this class provides a method to retrieve the minimum value in the stack using <see
            cref="M:LeetCode.MinStack.GetMin"/>.  The minimum value is updated dynamically as elements are added or removed.</remarks>
        </member>
        <member name="M:LeetCode.MinStack.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LeetCode.MinStack"/> class, which represents a stack that supports
            retrieving the minimum element in constant time.
            </summary>
            <remarks>The <see cref="T:LeetCode.MinStack"/> class provides standard stack operations (push, pop, and
            peek) along with a method to retrieve the minimum element in the stack.</remarks>
        </member>
        <member name="M:LeetCode.MinStack.Push(System.Int32)">
            <summary>
            Adds the specified value to the top of the stack.
            </summary>
            <remarks>The stack will grow dynamically to accommodate the new value if necessary.</remarks>
            <param name="val">The value to push onto the stack.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.MinStack.Pop">
            <summary>
            Removes the top element from the stack.
            </summary>
            <remarks>This method modifies the state of the stack by removing its topmost element.  If the
            stack is empty, calling this method will result in an exception.</remarks>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.MinStack.Top">
            <summary>
            Retrieves the top element of the stack without removing it.
            </summary>
            <returns>The value of the top element in the stack.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.MinStack.GetMin">
            <summary>
            Retrieves the minimum value from the collection.
            </summary>
            <returns>The smallest integer in the collection. If the collection is empty, the behavior is undefined.</returns>
            <exception cref="T:System.NotImplementedException">Thrown when the method is not implemented.</exception>
        </member>
        <member name="T:LeetCode.PeekingIterator">
            <summary>
            窥视迭代器
            </summary>
        </member>
        <member name="T:LeetCode.Codec">
            Definition for a binary tree node.
            public class TreeNode {
                public int val;
                public TreeNode left;
                public TreeNode right;
                public TreeNode(int x) { val = x; }
            }
        </member>
        <!-- Badly formed XML comment ignored for member "T:LeetCode.NestedIterator" -->
        <member name="M:LeetCode.NestedIterator.#ctor(System.Collections.Generic.IList{LeetCode.INestedInteger})">
            <summary>
            扁平化嵌套列表迭代器
            </summary>
            <param name="nestedList"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.NestedIterator.HasNext">
            <summary>
            是否有下一个元素
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.NestedIterator.Next">
            <summary>
            返回下一个元素
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:LeetCode.RandomizedSet">
            <summary>
            设计一个支持在平均时间复杂度 O(1) 下，进行插入、删除和获取随机元素的集合。
            </summary>
        </member>
        <member name="M:LeetCode.RandomizedSet.#ctor">
            <summary>
            构造集合对象
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.RandomizedSet.Insert(System.Int32)">
            <summary>
            向集合中插入一个元素，如果元素已经存在，则返回 false，否则返回 true。
            </summary>
            <param name="val"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.RandomizedSet.Remove(System.Int32)">
            <summary>
            从集合中删除一个元素，如果元素不存在，则返回 false，否则返回 true。
            </summary>
            <param name="val"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LeetCode.RandomizedSet.GetRandom">
            <summary>
            随机返回集合中的一个元素，要求每个元素被返回的概率相同。
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:LeetCode.SyntaxLearning">
            <summary>
            语法学习
            </summary>
        </member>
        <member name="M:LeetCode.SyntaxLearning.Main">
            <summary>
            主运行方法
            </summary>
        </member>
    </members>
</doc>
