<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dopamine</name>
    </assembly>
    <members>
        <member name="T:Dopamine.ConfigManager">
            <summary>
            拓展域名下的Json配置管理器
            </summary>
        </member>
        <member name="P:Dopamine.ConfigManager.Options">
            <summary>
            配置管理器使用的Json序列化选项
            </summary>
        </member>
        <member name="P:Dopamine.ConfigManager.Data">
            <summary>
            动态解析后的 json 文件
            </summary>
        </member>
        <member name="M:Dopamine.ConfigManager.Save">
            <summary>
            存储
            </summary>
        </member>
        <member name="T:Dopamine.AccessManager">
            <summary>
            Access管理器
            </summary>
        </member>
        <member name="P:Dopamine.AccessManager.Instance">
            <summary>
            单例实例化
            </summary>
        </member>
        <member name="P:Dopamine.AccessManager.DataBaseFullNamePath">
            <summary>
            数据库完整路径
            </summary>
        </member>
        <member name="P:Dopamine.AccessManager.Provider">
            <summary>
            Provider字段
            </summary>
        </member>
        <member name="P:Dopamine.AccessManager.ConnectionString">
            <summary>
            访问数据库字段
            </summary>
        </member>
        <member name="M:Dopamine.AccessManager.GetDataTable(System.String)">
            <summary>
            获取表信息
            </summary>
        </member>
        <member name="T:Dopamine.ConcurrentPriorityQueue`1">
            <summary>
            线程安全优先队列
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Dopamine.ConcurrentPriorityQueue`1.#ctor(System.Func{`0,System.IComparable})">
            <summary>
            
            </summary>
            <param name="prioritySelector"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Dopamine.ConcurrentPriorityQueue`1.#ctor(System.Func{`0,System.IComparable},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="prioritySelector"></param>
            <param name="collection"></param>
        </member>
        <member name="M:Dopamine.ConcurrentPriorityQueue`1.Enqueue(`0)">
            <summary>
            入队
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Dopamine.ConcurrentPriorityQueue`1.TryDequeue(`0@)">
            <summary>
            尝试入队
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.ConcurrentPriorityQueue`1.TryPeek(`0@)">
            <summary>
            取头部
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.ConcurrentPriorityQueue`1.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="P:Dopamine.ConcurrentPriorityQueue`1.IsEmpty">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="M:Dopamine.ConcurrentPriorityQueue`1.TryAdd(`0)">
            <summary>
            添加
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.ConcurrentPriorityQueue`1.TryTake(`0@)">
            <summary>
            尝试出队
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.ConcurrentPriorityQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            复制到新数组
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Dopamine.ConcurrentPriorityQueue`1.ToArray">
            <summary>
            转数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dopamine.ConcurrentPriorityQueue`1.GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dopamine.ConcurrentPriorityQueue`1.Count">
            <summary>
            个数
            </summary>
        </member>
        <member name="P:Dopamine.ConcurrentPriorityQueue`1.SyncRoot">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dopamine.ConcurrentPriorityQueue`1.IsSynchronized">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dopamine.ConcurrentPriorityQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            复制
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Dopamine.ConcurrentPriorityQueue`1.HeapifyUp(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Dopamine.ConcurrentPriorityQueue`1.EnqueueRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            添加
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Dopamine.ConcurrentPriorityQueue`1.DequeueAll">
            <summary>
            全部出队
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dopamine.ExtensionMethods">
            <summary>
            拓展域名下的额外静态方法
            </summary>
        </member>
        <member name="M:Dopamine.ExtensionMethods.ShowInTrace(System.Object,System.Boolean)">
            <summary>
            在【输出】中将字符串打印出来
            </summary>
            <param name="input">输入的字符串</param>
            <param name="showDateTime">添加时间戳</param>
        </member>
        <member name="M:Dopamine.ExtensionMethods.ShowInConsole(System.Object,System.Boolean)">
            <summary>
            在终端中打印文本信息
            </summary>
            <param name="input"></param>
            <param name="showDateTime"></param>
        </member>
        <member name="M:Dopamine.ExtensionMethods.ToString``1(``0[])">
            <summary>
            数组转字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.ExtensionMethods.CopyToClipboard(System.String)">
            <summary>
            复制文本到剪切板
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.ExtensionMethods.Max``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取最大值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.ExtensionMethods.GetFrame(System.Net.Sockets.NetworkStream,System.Int32)">
            <summary>
            从流中获取数据帧
            </summary>
            <param name="stream">输入流</param>
            <param name="capacity">容量</param>
            <returns>流数据帧</returns>
        </member>
        <member name="M:Dopamine.ExtensionMethods.GetSumCheck(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            和校验
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.ExtensionMethods.GetXor(System.Collections.Generic.IEnumerable{System.Byte},System.Int32,System.Int32)">
            <summary>
            计算检验码[帧头不进入检验范围]
            </summary>
        </member>
        <member name="M:Dopamine.ExtensionMethods.FillBBCAtLast(System.Collections.Generic.IEnumerable{System.Byte},System.Boolean)">
            <summary>
            将BCC校验码填入数据帧最后一位（如果最后一位不为0x00,则自动补位）
            </summary>
        </member>
        <member name="M:Dopamine.ExtensionMethods.HasBytes(System.Collections.Generic.IEnumerable{System.Byte[]},System.Byte[])">
            <summary>
            判断目标 byte[] 是否在集合中 
            </summary>
            <param name="Input"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.ExtensionMethods.AppendXor(System.Byte[],System.Boolean)">
            <summary>
            在帧末尾添加异或校验
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dopamine.ExtensionMethods.FromHexString(System.String)">
            <summary>
            将hex-string转化成byte[]
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.ExtensionMethods.SubFrame(System.Collections.Generic.IEnumerable{System.Byte},System.Int32,System.Int32)">
            <summary>
            获取指定位置开始，目标长度的数据帧
            </summary>
            <param name="input"></param>
            <param name="startIndex"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.ExtensionMethods.GetInt16(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            输入2bytes，获得一个short型
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.ExtensionMethods.GetInt32(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            输入4bytes，获得一个int型
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.ExtensionMethods.GetInt64(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            输入8bytes，获得一个long型
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.ExtensionMethods.ToFitNumber(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            输入任意字节，转化为合适的数字类型并返回值
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.ExtensionMethods.ToFitNumber1(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            将字节数组转换为合适的数值类型（自动适配 Int16/Int32/Int64）
            </summary>
        </member>
        <member name="M:Dopamine.ExtensionMethods.ByteStringToBytes(System.String)">
            <summary>
            将字节字符串转换为十六进制数组
            </summary>
            <param name="byteString"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.ExtensionMethods.GetlittleEndianByteString(System.Single,System.Int32)">
            <summary>
            获取浮点型四舍五入后的小端序表示字符串
            </summary>
            <param name="inputFloat">输入的浮点数<para>范围在[int.MinValue,int.MaxValue]</para></param>
            <param name="bytesCount">字节数<para>范围[1,4]</para></param>
            <returns></returns>
        </member>
        <member name="T:Dopamine.DLT645_2007">
            <summary>
            DL/T 645-2007多功能电能表通讯协议
            </summary>
        </member>
        <member name="P:Dopamine.DLT645_2007.Header">
            <summary>
            帧头
            </summary>
        </member>
        <member name="P:Dopamine.DLT645_2007.Tail">
            <summary>
            帧尾
            </summary>
        </member>
        <member name="M:Dopamine.DLT645_2007.FrameAssembly(System.Byte[],System.Byte,System.Byte[])">
            <summary>
            组帧
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dopamine.DLT645_2007.ReadMeterAddress">
            <summary>
            读取表地址
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dopamine.DLT645_2007.FunctionCode">
            <summary>
            功能码枚举
            </summary>
        </member>
        <member name="F:Dopamine.DLT645_2007.FunctionCode.保留">
            <summary>
            保留功能码，0b0_0000
            </summary>
        </member>
        <member name="F:Dopamine.DLT645_2007.FunctionCode.广播校时">
            <summary>
            广播校时功能码，0b0_1000
            </summary>
        </member>
        <member name="F:Dopamine.DLT645_2007.FunctionCode.读数据">
            <summary>
            写数据功能码，0b1_0001
            </summary>
        </member>
        <member name="F:Dopamine.DLT645_2007.FunctionCode.写数据">
            <summary>
            写数据功能码，0b1_0100
            </summary>
        </member>
        <member name="F:Dopamine.DLT645_2007.FunctionCode.电表清零">
            <summary>
            电表清零功能码，0b1_1010
            </summary>
        </member>
        <member name="M:Dopamine.DLT645_2007.GetControlCode(System.Boolean,System.Boolean,System.Boolean,Dopamine.DLT645_2007.FunctionCode)">
            <summary>
            获取控制码
            </summary>
            <param name="direction">传送方向<para>true - 主站发出的命令帧</para><para>false - 从站发出的应答帧</para></param>
            <param name="replyFlag">从站应答标志<para>true - 从站正确应答</para><para>false - 从站异常应答</para></param>
            <param name="hasSubsequent">是否有后续帧<para>true - 有后续数据帧</para><para>false - 无后续数据帧</para></param>
            <param name="functionCode">功能码<para>保留 = 0b0_0000</para><para>广播校时 = 0b0_1000</para><para>读数据 = 0b1_0001</para><para>写数据 = 0b1_0100</para><para>电表清零 = 0b1_1010</para></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.DLT645_2007.ParseControlCode(System.Byte,System.Boolean@,System.Boolean@,System.Boolean@,System.String@)">
            <summary>
            解析控制码
            </summary>
            <param name="inputControlCode">输入的控制码</param>
            <param name="direction">传送方向<para>true - 主站发出的命令帧</para><para>false - 从站发出的应答帧</para></param>
            <param name="replyFlag">从站应答标志<para>true - 从站正确应答</para><para>false - 从站异常应答</para></param>
            <param name="hasSubsequent">是否有后续帧<para>true - 有后续数据帧</para><para>false - 无后续数据帧</para></param>
            <param name="function">功能概述</param>
        </member>
        <member name="T:Dopamine.FrameManager">
            <summary>
            报文处理器
            </summary>
        </member>
        <member name="F:Dopamine.FrameManager._lazy">
            <summary>
            延迟实例化
            </summary>
        </member>
        <member name="P:Dopamine.FrameManager.Instance">
            <summary>
            单例实例化
            </summary>
        </member>
        <member name="M:Dopamine.FrameManager.AssembleFrame``1(``0[])">
            <summary>
            组装数据帧
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dopamine.DopamineController">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dopamine.DopamineController.Test``1(``0)">
            <summary>
            泛型匹配
            </summary>
            <typeparam name="TParam"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.DopamineController.Test(CommunicationFormat{System.String})">
            <summary>
            string型交流
            </summary>
            <param name="communicate"></param>
            <returns></returns>
        </member>
        <member name="T:Dopamine.DopamineHttpClient">
            <summary>
            基于HttpClient客户端
            </summary>
        </member>
        <member name="M:Dopamine.DopamineHttpClient.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:Dopamine.DopamineHttpClient.#ctor(System.String)">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:Dopamine.DopamineHttpClient.#ctor(System.Net.Http.HttpMessageHandler)">
            <summary>
            构造
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Dopamine.DopamineHttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)">
            <summary>
            构造
            </summary>
            <param name="handler"></param>
            <param name="disposeHandler"></param>
        </member>
        <member name="P:Dopamine.DopamineHttpClient.Url">
            <summary>
            目标Url
            </summary>
        </member>
        <member name="M:Dopamine.DopamineHttpClient.PostStringAsync(System.String,System.String)">
            <summary>
            异步POST请求String型消息
            </summary>
            <param name="stringMessage"></param>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.DopamineHttpClient.GetAPIAsync(System.String,System.String)">
            <summary>
            异步GET请求API
            </summary>
            <param name="APIString"></param>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.DopamineHttpClient.Dispose(System.Boolean)">
            <summary>
            内部释放
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Dopamine.HttpMessage">
            <summary>
            Message类
            </summary>
        </member>
        <member name="P:Dopamine.HttpMessage.Message">
            <summary>
            HttpBody中的消息
            </summary>
        </member>
        <member name="P:Dopamine.HttpMessage.Flag">
            <summary>
            标识符
            </summary>
        </member>
        <member name="T:Dopamine.DopamineRouter">
            <summary>
            Dopamine路由
            </summary>
        </member>
        <member name="M:Dopamine.DopamineRouter.#ctor(System.String,System.Int32)">
            <summary>
            构造
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
        </member>
        <member name="M:Dopamine.DopamineRouter.Close">
            <summary>
            关闭路由
            </summary>
        </member>
        <member name="T:Dopamine.DopamineTcpClient">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dopamine.DopamineTcpClient.Listener">
            <summary>
            监听器
            </summary>
        </member>
        <member name="P:Dopamine.DopamineTcpClient.IsRunning">
            <summary>
            运行标识符
            </summary>
        </member>
        <member name="M:Dopamine.DopamineTcpClient.Start">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:Dopamine.DopamineTcpClient.HandleClientConnected(System.IAsyncResult)">
            <summary>
            处理连结
            </summary>
            <param name="asyncResult"></param>
        </member>
        <member name="M:Dopamine.DopamineTcpClient.ProcessClient">
            <summary>
            客户端回复线程
            </summary>
        </member>
        <member name="T:Dopamine.SimpleClient">
            <summary>
            简易客户端
            </summary>
        </member>
        <member name="M:Dopamine.SimpleClient.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dopamine.SimpleClient.#ctor(System.Net.Http.HttpMessageHandler)">
            <summary>
            
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Dopamine.SimpleClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)">
            <summary>
            
            </summary>
            <param name="handler"></param>
            <param name="disposeHandler"></param>
        </member>
        <member name="M:Dopamine.SimpleClient.PostTo``2(``0,System.String)">
            <summary>
            自定义Post
            </summary>
            <typeparam name="TParam"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="input"></param>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.SimpleClient.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.SimpleClient.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dopamine.SimpleClient.Send(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.SimpleClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.SimpleClient.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dopamine.SimpleClient.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Dopamine.DopamineHttpServer">
            <summary>
            基于HttpServer
            </summary>
        </member>
        <member name="M:Dopamine.DopamineHttpServer.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dopamine.DopamineHttpServer.#ctor(System.Web.Http.HttpConfiguration)">
            <summary>
            
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:Dopamine.DopamineHttpServer.#ctor(System.Net.Http.HttpMessageHandler)">
            <summary>
            
            </summary>
            <param name="dispatcher"></param>
        </member>
        <member name="M:Dopamine.DopamineHttpServer.#ctor(System.Web.Http.HttpConfiguration,System.Net.Http.HttpMessageHandler)">
            <summary>
            
            </summary>
            <param name="configuration"></param>
            <param name="dispatcher"></param>
        </member>
        <member name="M:Dopamine.DopamineHttpServer.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.DopamineHttpServer.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dopamine.DopamineHttpServer.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dopamine.DopamineHttpServer.Dispose(System.Boolean)">
            <summary>
            手动释放资源
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Dopamine.DopamineHttpServer.Initialize">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Dopamine.DopamineHttpServer.Send(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.DopamineHttpServer.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Dopamine.GameManager">
            <summary>
            游戏管理器
            </summary>
        </member>
        <member name="P:Dopamine.GameManager.NormalTimeScale">
            <summary>
            时间流逝速度
            </summary>
        </member>
        <member name="F:Dopamine.GameManager.OnGamePaused">
            <summary>
            游戏暂停时事件
            </summary>
            <remarks>
            需要手动注册，在<c>GamePaused=true</c>时自动调用
            </remarks>
        </member>
        <member name="F:Dopamine.GameManager.OnGameResumed">
            <summary>
            游戏恢复时事件
            </summary>
            <remarks>需要手动注册，在<c>GamePaused=false</c>时自动调用</remarks>
        </member>
        <member name="P:Dopamine.GameManager.GamePaused">
            <summary>
            游戏暂停标识符
            </summary>
        </member>
        <member name="M:Dopamine.GameManager.OnEnable">
            <summary>
            组件激活
            </summary>
        </member>
        <member name="M:Dopamine.GameManager.OnDisable">
            <summary>
            组件取消激活
            </summary>
        </member>
        <member name="M:Dopamine.GameManager.Update">
            <summary>
            每帧更新
            </summary>
        </member>
        <member name="M:Dopamine.GameManager.SetTimeScale(System.Single)">
            <summary>
            设置时间流逝速度
            </summary>
            <param name="timeScale"></param>
        </member>
        <member name="M:Dopamine.GameManager.SetCursorLockState(System.Boolean)">
            <summary>
            设置鼠标锁定
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Dopamine.GameManager.SetCursorVisible(System.Boolean)">
            <summary>
            设置鼠标可见
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Dopamine.GameManager.Quit">
            <summary>
            关闭程序
            </summary>
        </member>
        <member name="T:Dopamine.Singleton`1">
            <summary>
            单例基类
            </summary>
            <typeparam name="T">MonoBehaviour类</typeparam>
        </member>
        <member name="P:Dopamine.Singleton`1.Instance">
            <summary>
            单例实例
            </summary>
        </member>
        <member name="M:Dopamine.Singleton`1.Awake">
            <summary>
            在Awake方法中初始化单例实例
            </summary>
        </member>
        <member name="T:Dopamine.TestMono">
            <summary>
            测试用例
            </summary>
        </member>
        <member name="T:Dopamine.TestSO">
            <summary>
            测试用Test Scriptable Object
            </summary>
        </member>
        <member name="F:Dopamine.TestSO.m_TextAsset">
            <summary>
            测试文本资产
            </summary>
        </member>
        <member name="M:Dopamine.TestSO.CompareTo(Dopamine.TestSO)">
            <summary>
            排序方法
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Dopamine.Config">
            <summary>
            测试用config
            </summary>
        </member>
        <member name="F:Dopamine.Config.name">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:Dopamine.Config.data">
            <summary>
            数据
            </summary>
        </member>
        <member name="T:Dopamine.DynamicClass">
            <summary>
            动态解析类
            </summary>
        </member>
        <member name="M:Dopamine.DynamicClass.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            动态属性访问
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.DynamicClass.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            动态属性设置
            </summary>
            <param name="binder"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Dopamine.DynamicClass.Item(System.String)">
            <summary>
            索引器访问
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Dopamine.DynamicClass.Properties">
            <summary>
            获取所有属性
            </summary>
        </member>
        <member name="M:Dopamine.DynamicClass.GetDynamicMemberNames">
            <summary>
            返回所有键名
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dopamine.DynamicClass.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
            <summary>
            重写 TryDeleteMember：删除单个成员（支持动态语法）
            </summary>
            <param name="binder"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.DynamicClass.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="M:Dopamine.DynamicClass.Remove(System.String[])">
            <summary>
            批量删除成员
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="T:Dopamine.DynamicClassConverter">
            <summary>
            专属Json解析类
            </summary>
        </member>
        <member name="M:Dopamine.DynamicClassConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            读取接口
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.DynamicClassConverter.ReadObject(System.Text.Json.Utf8JsonReader@,Dopamine.DynamicClass,System.Text.Json.JsonSerializerOptions)">
            <summary>
            写入接口
            </summary>
            <param name="reader"></param>
            <param name="data"></param>
            <param name="options"></param>
            <exception cref="T:System.Text.Json.JsonException"></exception>
        </member>
        <member name="M:Dopamine.DynamicClassConverter.ReadValue(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
            <summary>
            读取值
            </summary>
            <param name="reader"></param>
            <param name="options"></param>
            <returns></returns>
            <exception cref="T:System.Text.Json.JsonException"></exception>
        </member>
        <member name="M:Dopamine.DynamicClassConverter.Write(System.Text.Json.Utf8JsonWriter,Dopamine.DynamicClass,System.Text.Json.JsonSerializerOptions)">
            <summary>
            写入动态类
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="M:Dopamine.DynamicClassConverter.WriteValue(System.Text.Json.Utf8JsonWriter,System.Object,System.Text.Json.JsonSerializerOptions)">
            <summary>
            写入值
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:Dopamine.JsonHelper">
            <summary>
            Json帮助类
            </summary>
            <remarks>注意：仅允许序列化属性而不是字段</remarks>
            <example>
            这是一个示例类，展示如何使用 Json帮助类：
            <code>
            public class TestClass
            {
                public TestClass(string name = "Bob", int age = 15) 
                { 
                    this.Name = name; 
                    this.Age = age; 
                }
                
                public string Name { get; set; } = "Bob";
                public int Age { get; set; } = 15;
            }
            </code>
            </example>
        </member>
        <member name="F:Dopamine.JsonHelper.MainJsonFilePath">
            <summary>
            Json文件主路径
            </summary>
        </member>
        <member name="F:Dopamine.JsonHelper.JsonOptions">
            <summary>
            序列化设定
            </summary>
        </member>
        <member name="F:Dopamine.JsonHelper.LockObj">
            <summary>
            线程锁
            </summary>
        </member>
        <member name="M:Dopamine.JsonHelper.#cctor">
            <summary>
            静态实例化
            </summary>
        </member>
        <member name="P:Dopamine.JsonHelper.JsonFilter">
            <summary>
            Json文件过滤器
            </summary>
        </member>
        <member name="M:Dopamine.JsonHelper.Load``1(System.String)">
            <summary>
            加载Json文件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fileName">默认文件名包含绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.JsonHelper.Save``1(``0,System.String[])">
            <summary>
            存写Json文件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="fileNames"></param>
            <returns></returns>
        </member>
        <member name="T:Dopamine.Recorder">
            <summary>
            记录器
            </summary>
        </member>
        <member name="P:Dopamine.Recorder.Enable">
            <summary>
            功能启用标识符
            </summary>
        </member>
        <member name="M:Dopamine.Recorder.#cctor">
            <summary>
            私有构造，在构造时自动注册记录报错
            </summary>
        </member>
        <member name="M:Dopamine.Recorder.Write(System.String,System.String,System.Boolean,ContextLevel)">
            <summary>
            写入
            </summary>
        </member>
        <member name="M:Dopamine.Recorder.Record(System.String)">
            <summary>
            标准记录
            </summary>
        </member>
        <member name="M:Dopamine.Recorder.RecordError(System.String)">
            <summary>
            报错记录
            </summary>
            <param name="err_msg"></param>
        </member>
        <member name="T:Dopamine.PathHelper">
            <summary>
            路径辅助类
            </summary>
        </member>
        <member name="M:Dopamine.PathHelper.GetRuntimeDirectory(System.String)">
            <summary>
            将路径转换成OS可识别的路径
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Dopamine.SerializableDictionary`2">
            <summary>
            基于双链表实现的可序列化字典
            </summary>
        </member>
        <member name="T:CommunicationFormat`1">
            <summary>
            Json请求体的通信格式
            </summary>
        </member>
        <member name="P:CommunicationFormat`1.Data">
            <summary>
            主体信息
            </summary>
        </member>
        <member name="P:CommunicationFormat`1.Remark">
            <summary>
            备注内容
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:CommunicationFormat`1.ErrorFlag">
            <summary>
            错误信号标识符
            </summary>
        </member>
        <member name="T:ContextLevel">
            <summary>
            记录器内容的等级
            </summary>
        </member>
        <member name="F:ContextLevel.None">
            <summary>
            无设置
            </summary>
        </member>
        <member name="F:ContextLevel.Public">
            <summary>
            公开级别
            </summary>
        </member>
        <member name="F:ContextLevel.Private">
            <summary>
            非公开级别
            </summary>
        </member>
        <member name="F:ContextLevel.Alert">
            <summary>
            警告级别
            </summary>
        </member>
        <member name="F:ContextLevel.Error">
            <summary>
            报错级别
            </summary>
        </member>
        <member name="F:ContextLevel.Debug">
            <summary>
            调试级别
            </summary>
        </member>
    </members>
</doc>
