<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dopamine</name>
    </assembly>
    <members>
        <member name="T:Dopamine.ConfigManager">
            <summary>
            拓展域名下的Json配置管理器
            </summary>
        </member>
        <member name="P:Dopamine.ConfigManager.Data">
            <summary>
            动态解析后的 json 文件
            </summary>
        </member>
        <member name="T:Dopamine.ExtensionMethods">
            <summary>
            拓展域名下的额外静态方法
            </summary>
        </member>
        <member name="M:Dopamine.ExtensionMethods.ShowInTrace(System.String,System.Boolean)">
            <summary>
            在【输出】中将字符串打印出来
            </summary>
            <param name="input">输入的字符串</param>
            <param name="showDateTime">添加时间戳</param>
        </member>
        <member name="M:Dopamine.ExtensionMethods.ShowInConsole(System.String,System.Boolean)">
            <summary>
            在终端中打印文本信息
            </summary>
            <param name="input"></param>
            <param name="showDateTime"></param>
        </member>
        <member name="M:Dopamine.ExtensionMethods.ToString``1(``0[])">
            <summary>
            数组转字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.ExtensionMethods.GetFrame(System.Net.Sockets.NetworkStream,System.Int32)">
            <summary>
            从流中获取数据帧
            </summary>
            <param name="stream">输入流</param>
            <param name="capacity">容量</param>
            <returns>流数据帧</returns>
        </member>
        <member name="T:Dopamine.BeatClient">
            <summary>
            客户端，向服务器发送心跳包
            </summary>
        </member>
        <member name="M:Dopamine.BeatClient.#ctor(System.Int32,System.Int32)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Dopamine.BeatClient.Active">
            <summary>
            启动方法
            </summary>
        </member>
        <member name="P:Dopamine.BeatClient.Port">
            <summary>
            监听端口
            </summary>
        </member>
        <member name="P:Dopamine.BeatClient.Interval">
            <summary>
            心跳间隔,单位毫秒（ms）
            </summary>
            <remarks>区间[100,int.MaxValue]</remarks>
        </member>
        <member name="P:Dopamine.BeatClient.Listener">
            <summary>
            监听器
            </summary>
        </member>
        <member name="P:Dopamine.BeatClient.RemoteClient">
            <summary>
            远程客户端
            </summary>
        </member>
        <member name="P:Dopamine.BeatClient.RemoteEndPoint">
            <summary>
            远程端口
            </summary>
        </member>
        <member name="P:Dopamine.BeatClient.Stream">
            <summary>
            数据流
            </summary>
        </member>
        <member name="P:Dopamine.BeatClient.CancellationTokenSource">
            <summary>
            断连信号源
            </summary>
        </member>
        <member name="P:Dopamine.BeatClient.IsRunning">
            <summary>
            运行标识符
            </summary>
        </member>
        <member name="M:Dopamine.BeatClient.ListenAsync">
            <summary>
            异步监听服务器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dopamine.BeatClient.IsBeatStartFrame(System.Byte[])">
            <summary>
            在这里判断是否为心跳包启动数据帧
            </summary>
            <param name="frame"></param>
            <returns></returns>
        </member>
        <member name="P:Dopamine.BeatClient.HeartbeatMessage">
            <summary>
            心跳包内容
            </summary>
        </member>
        <member name="M:Dopamine.BeatClient.SendHeartbeatAsync(System.Threading.CancellationToken)">
            <summary>
            异步发送心跳包
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.BeatClient.Dispose">
            <summary>
            手动释放
            </summary>
        </member>
        <member name="M:Dopamine.BeatClient.Dispose(System.Boolean)">
            <summary>
            内部释放
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Dopamine.BeatClient.OnApplicationExit">
            <summary>
            当程序关闭时运行
            </summary>
        </member>
        <member name="M:Dopamine.BeatClient.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="T:Dopamine.DeepSeekTcpClient">
            <summary>
            DeepSeek 写的 Tcp 客户端
            </summary>
        </member>
        <member name="T:Dopamine.DeepSeekTcpServer">
            <summary>
            DeepSeek 的 Tcp 服务器
            </summary>
        </member>
        <member name="T:Dopamine.DopamineBeatClient">
            <summary>
            心跳客户端
            </summary>
        </member>
        <member name="M:Dopamine.DopamineBeatClient.#ctor(System.String)">
            <summary>
            构造
            </summary>
        </member>
        <member name="F:Dopamine.DopamineBeatClient.State">
            <summary>
            状态机
            </summary>
        </member>
        <member name="P:Dopamine.DopamineBeatClient.CurrentState">
            <summary>
            当前客户端状态
            </summary>
        </member>
        <member name="P:Dopamine.DopamineBeatClient.CancellationTokenSource">
            <summary>
            取消信号源
            </summary>
        </member>
        <member name="P:Dopamine.DopamineBeatClient.IsRunning">
            <summary>
            运行标识符
            </summary>
        </member>
        <member name="P:Dopamine.DopamineBeatClient.Disposed">
            <summary>
            是否被释放
            </summary>
        </member>
        <member name="M:Dopamine.DopamineBeatClient.Initialize">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Dopamine.DopamineBeatClient.Update">
            <summary>
            处理每秒运行逻辑
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dopamine.DopamineBeatClient.SwitchState(Dopamine.ClientState)">
            <summary>
            状态切换
            </summary>
            <param name="newState"></param>
        </member>
        <member name="M:Dopamine.DopamineBeatClient.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:Dopamine.DopamineBeatClient.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Dopamine.DopamineBeatClient.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="T:Dopamine.ClientStateMachine">
            <summary>
            简单客户端状态机，用于处理客户端逻辑
            </summary>
        </member>
        <member name="M:Dopamine.ClientStateMachine.#ctor(Dopamine.DopamineBeatClient)">
            <summary>
            简单客户端状态机，用于处理客户端逻辑
            </summary>
        </member>
        <member name="P:Dopamine.ClientStateMachine.Client">
            <summary>
            父类心跳客户端
            </summary>
        </member>
        <member name="M:Dopamine.ClientStateMachine.OnEnter">
            <summary>
            进入逻辑
            </summary>
        </member>
        <member name="M:Dopamine.ClientStateMachine.OnUpdate">
            <summary>
            实时运行逻辑
            </summary>
        </member>
        <member name="M:Dopamine.ClientStateMachine.OnExit">
            <summary>
            退出逻辑
            </summary>
        </member>
        <member name="T:Dopamine.IDLEState">
            <summary>
            待机逻辑
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Dopamine.IDLEState.#ctor(Dopamine.DopamineBeatClient)">
            <summary>
            待机逻辑
            </summary>
            <param name="client"></param>
        </member>
        <member name="P:Dopamine.IDLEState.Listener">
            <summary>
            监听
            </summary>
        </member>
        <member name="M:Dopamine.IDLEState.OnEnter">
            <summary>
            进入待机时逻辑
            </summary>
        </member>
        <member name="M:Dopamine.IDLEState.OnExit">
            <summary>
            退出待机时逻辑
            </summary>
        </member>
        <member name="M:Dopamine.IDLEState.OnUpdate">
            <summary>
            实时运行逻辑
            </summary>
        </member>
        <member name="T:Dopamine.BeatingState">
            <summary>
            心跳逻辑
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Dopamine.BeatingState.#ctor(Dopamine.DopamineBeatClient)">
            <summary>
            心跳逻辑
            </summary>
            <param name="client"></param>
        </member>
        <member name="F:Dopamine.BeatingState.data">
            <summary>
            固定格式
            </summary>
        </member>
        <member name="M:Dopamine.BeatingState.OnEnter">
            <summary>
            进入心跳时逻辑
            </summary>
        </member>
        <member name="M:Dopamine.BeatingState.OnExit">
            <summary>
            退出心跳时逻辑
            </summary>
        </member>
        <member name="M:Dopamine.BeatingState.OnUpdate">
            <summary>
            实时运行逻辑
            </summary>
        </member>
        <member name="T:Dopamine.ClientState">
            <summary>
            客户端状态
            </summary>
        </member>
        <member name="F:Dopamine.ClientState.IDLE">
            <summary>
            待机
            </summary>
        </member>
        <member name="F:Dopamine.ClientState.Beating">
            <summary>
            心跳
            </summary>
        </member>
        <member name="T:Dopamine.DopamineHttpClient">
            <summary>
            基于HttpClient客户端
            </summary>
        </member>
        <member name="M:Dopamine.DopamineHttpClient.#ctor(System.String)">
            <summary>
            构造
            </summary>
        </member>
        <member name="P:Dopamine.DopamineHttpClient.Url">
            <summary>
            目标Url
            </summary>
        </member>
        <member name="M:Dopamine.DopamineHttpClient.GetAsync(System.String)">
            <summary>
            异步获取
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.DopamineHttpClient.PostAsync(System.String,System.String)">
            <summary>
            异步请求
            </summary>
            <param name="data"></param>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="T:Dopamine.TcpServer">
            <summary>
            基于tcp协议创建的服务器
            </summary>
        </member>
        <member name="M:Dopamine.TcpServer.#ctor(System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Dopamine.TcpServer.Listener">
            <summary>
            监听器
            </summary>
        </member>
        <member name="P:Dopamine.TcpServer.RemoteClient">
            <summary>
            Tcp客户端
            </summary>
        </member>
        <member name="P:Dopamine.TcpServer.LocalIPEndPoint">
            <summary>
            本机IP终结点
            </summary>
        </member>
        <member name="P:Dopamine.TcpServer.RemoteIPEndPoint">
            <summary>
            远端IP终结点
            </summary>
        </member>
        <member name="P:Dopamine.TcpServer.Stream">
            <summary>
            网络流
            </summary>
        </member>
        <member name="P:Dopamine.TcpServer.CancellationTokenSource">
            <summary>
            取消操作令牌源
            </summary>
        </member>
        <member name="P:Dopamine.TcpServer.IsRunning">
            <summary>
            运行标识符
            </summary>
        </member>
        <member name="P:Dopamine.TcpServer.Disposed">
            <summary>
            释放标识符
            </summary>
        </member>
        <member name="M:Dopamine.TcpServer.Initialization">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Dopamine.TcpServer.Active">
            <summary>
            启动服务器
            </summary>
        </member>
        <member name="M:Dopamine.TcpServer.Terminate">
            <summary>
            终止服务器
            </summary>
        </member>
        <member name="M:Dopamine.TcpServer.Send(System.Byte[])">
            <summary>
            发送
            </summary>
        </member>
        <member name="M:Dopamine.TcpServer.StartListen">
            <summary>
            异步等待客户端接入
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dopamine.TcpServer.Dispose">
            <summary>
            手动释放
            </summary>
        </member>
        <member name="M:Dopamine.TcpServer.Dispose(System.Boolean)">
            <summary>
            私有手动释放
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Dopamine.TcpServer.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="T:Dopamine.GameManager">
            <summary>
            游戏管理器
            </summary>
        </member>
        <member name="P:Dopamine.GameManager.NormalTimeScale">
            <summary>
            时间流逝速度
            </summary>
        </member>
        <member name="F:Dopamine.GameManager.OnGamePaused">
            <summary>
            游戏暂停时事件
            </summary>
            <remarks>
            需要手动注册，在<c>GamePaused=true</c>时自动调用
            </remarks>
        </member>
        <member name="F:Dopamine.GameManager.OnGameResumed">
            <summary>
            游戏恢复时事件
            </summary>
            <remarks>需要手动注册，在<c>GamePaused=false</c>时自动调用</remarks>
        </member>
        <member name="P:Dopamine.GameManager.GamePaused">
            <summary>
            游戏暂停标识符
            </summary>
        </member>
        <member name="M:Dopamine.GameManager.OnEnable">
            <summary>
            组件激活
            </summary>
        </member>
        <member name="M:Dopamine.GameManager.OnDisable">
            <summary>
            组件取消激活
            </summary>
        </member>
        <member name="M:Dopamine.GameManager.Update">
            <summary>
            每帧更新
            </summary>
        </member>
        <member name="M:Dopamine.GameManager.SetTimeScale(System.Single)">
            <summary>
            设置时间流逝速度
            </summary>
            <param name="timeScale"></param>
        </member>
        <member name="M:Dopamine.GameManager.SetCursorLockState(System.Boolean)">
            <summary>
            设置鼠标锁定
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Dopamine.GameManager.SetCursorVisible(System.Boolean)">
            <summary>
            设置鼠标可见
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Dopamine.GameManager.Quit">
            <summary>
            关闭程序
            </summary>
        </member>
        <member name="T:Dopamine.Singleton`1">
            <summary>
            单例基类
            </summary>
            <typeparam name="T">MonoBehaviour类</typeparam>
        </member>
        <member name="P:Dopamine.Singleton`1.Instance">
            <summary>
            单例实例
            </summary>
        </member>
        <member name="M:Dopamine.Singleton`1.Awake">
            <summary>
            在Awake方法中初始化单例实例
            </summary>
        </member>
        <member name="T:Dopamine.TestMono">
            <summary>
            测试用例
            </summary>
        </member>
        <member name="T:Dopamine.TestSO">
            <summary>
            测试用Test Scriptable Object
            </summary>
        </member>
        <member name="F:Dopamine.TestSO.m_TextAsset">
            <summary>
            测试文本资产
            </summary>
        </member>
        <member name="M:Dopamine.TestSO.CompareTo(Dopamine.TestSO)">
            <summary>
            排序方法
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Dopamine.Config">
            <summary>
            测试用config
            </summary>
        </member>
        <member name="F:Dopamine.Config.name">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:Dopamine.Config.data">
            <summary>
            数据
            </summary>
        </member>
        <member name="T:Dopamine.DynamicClass">
            <summary>
            动态解析类
            </summary>
        </member>
        <member name="M:Dopamine.DynamicClass.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            动态属性访问
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.DynamicClass.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            动态属性设置
            </summary>
            <param name="binder"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Dopamine.DynamicClass.Item(System.String)">
            <summary>
            索引器访问
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Dopamine.DynamicClass.Properties">
            <summary>
            获取所有属性
            </summary>
        </member>
        <member name="M:Dopamine.DynamicClass.GetDynamicMemberNames">
            <summary>
            返回所有键名
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dopamine.DynamicClass.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
            <summary>
            重写 TryDeleteMember：删除单个成员（支持动态语法）
            </summary>
            <param name="binder"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.DynamicClass.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="M:Dopamine.DynamicClass.Remove(System.String[])">
            <summary>
            批量删除成员
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="T:Dopamine.DynamicClassConverter">
            <summary>
            专属Json解析类
            </summary>
        </member>
        <member name="M:Dopamine.DynamicClassConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            读取接口
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.DynamicClassConverter.ReadObject(System.Text.Json.Utf8JsonReader@,Dopamine.DynamicClass,System.Text.Json.JsonSerializerOptions)">
            <summary>
            写入接口
            </summary>
            <param name="reader"></param>
            <param name="data"></param>
            <param name="options"></param>
            <exception cref="T:System.Text.Json.JsonException"></exception>
        </member>
        <member name="M:Dopamine.DynamicClassConverter.ReadValue(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
            <summary>
            读取值
            </summary>
            <param name="reader"></param>
            <param name="options"></param>
            <returns></returns>
            <exception cref="T:System.Text.Json.JsonException"></exception>
        </member>
        <member name="M:Dopamine.DynamicClassConverter.Write(System.Text.Json.Utf8JsonWriter,Dopamine.DynamicClass,System.Text.Json.JsonSerializerOptions)">
            <summary>
            写入动态类
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="M:Dopamine.DynamicClassConverter.WriteValue(System.Text.Json.Utf8JsonWriter,System.Object,System.Text.Json.JsonSerializerOptions)">
            <summary>
            写入值
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:Dopamine.JsonHelper">
            <summary>
            Json帮助类
            </summary>
            <remarks>注意：仅允许序列化属性而不是字段</remarks>
            <example>
            这是一个示例类，展示如何使用 Json帮助类：
            <code>
            public class TestClass
            {
                public TestClass(string name = "Bob", int age = 15) 
                { 
                    this.Name = name; 
                    this.Age = age; 
                }
                
                public string Name { get; set; } = "Bob";
                public int Age { get; set; } = 15;
            }
            </code>
            </example>
        </member>
        <member name="F:Dopamine.JsonHelper.MainJsonFilePath">
            <summary>
            Json文件主路径
            </summary>
        </member>
        <member name="F:Dopamine.JsonHelper.JsonOptions">
            <summary>
            序列化设定
            </summary>
        </member>
        <member name="F:Dopamine.JsonHelper.LockObj">
            <summary>
            线程锁
            </summary>
        </member>
        <member name="M:Dopamine.JsonHelper.#cctor">
            <summary>
            静态实例化
            </summary>
        </member>
        <member name="P:Dopamine.JsonHelper.JsonFilter">
            <summary>
            Json文件过滤器
            </summary>
        </member>
        <member name="M:Dopamine.JsonHelper.Load``1(System.String)">
            <summary>
            加载Json文件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fileName">默认文件名包含绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:Dopamine.JsonHelper.Save``1(``0,System.String[])">
            <summary>
            存写Json文件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="fileNames"></param>
            <returns></returns>
        </member>
        <member name="T:Dopamine.Recorder">
            <summary>
            记录器
            </summary>
        </member>
        <member name="P:Dopamine.Recorder.Enable">
            <summary>
            功能启用标识符
            </summary>
        </member>
        <member name="M:Dopamine.Recorder.#cctor">
            <summary>
            私有构造，在构造时自动注册记录报错
            </summary>
        </member>
        <member name="M:Dopamine.Recorder.Write(System.String,System.String,System.Boolean,ContextLevel)">
            <summary>
            写入
            </summary>
        </member>
        <member name="M:Dopamine.Recorder.Record(System.String)">
            <summary>
            标准记录
            </summary>
        </member>
        <member name="M:Dopamine.Recorder.RecordError(System.String)">
            <summary>
            报错记录
            </summary>
            <param name="err_msg"></param>
        </member>
        <member name="T:Dopamine.PathHelper">
            <summary>
            路径辅助类
            </summary>
        </member>
        <member name="M:Dopamine.PathHelper.GetRuntimeDirectory(System.String)">
            <summary>
            将路径转换成OS可识别的路径
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:ContextLevel">
            <summary>
            记录器内容的等级
            </summary>
        </member>
        <member name="F:ContextLevel.None">
            <summary>
            无设置
            </summary>
        </member>
        <member name="F:ContextLevel.Public">
            <summary>
            公开级别
            </summary>
        </member>
        <member name="F:ContextLevel.Private">
            <summary>
            非公开级别
            </summary>
        </member>
        <member name="F:ContextLevel.Alert">
            <summary>
            警告级别
            </summary>
        </member>
        <member name="F:ContextLevel.Error">
            <summary>
            报错级别
            </summary>
        </member>
        <member name="F:ContextLevel.Debug">
            <summary>
            调试级别
            </summary>
        </member>
    </members>
</doc>
